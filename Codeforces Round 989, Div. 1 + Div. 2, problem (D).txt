#include<bits/stdc++.h>
using namespace std;
#define pb(a) push_back(a)
#define mk(a,b) make_pair(a,b)
#define F first
#define S second
#define V vector
#define sz() size()
typedef long long ll;
typedef long double ld;
 
V<ll> prime,fact,Inv;
const ll Mod=1e9+7;
ll inv(ll a, ll b=Mod){
    return 1<a ? b - inv(b%a,a)*b/a : 1;
}
ll mod_expo(ll a,ll b,ll M=Mod){
    return (b?(mod_expo((a*a)%M,b/2,M)*(b&1? a:1))%M:1);
}
ll GCD(ll a,ll b){
    return (b?GCD(b,a%b):a);
}
ll LCM(ll a,ll b){
    if((a|b)==0) return 0;
    return a/GCD(a,b)*b;
}
vector<pair<ll,ll> > decompose_prime(ll a){
    vector<pair<ll,ll> > c;
    ll i=0;
    while(a>1){
        if(i<prime.size()){
            ll ss=0;
            while(a%prime[i]==0){
                ss++;
                a/=prime[i];
            }
            if(ss)c.pb(mk(prime[i],ss));
        }else{
            c.pb(mk(a,1));
            break;
        }
    }
    return c;
}
void Fact(ll n,ll M=Mod){
    fact.clear();
    Inv.clear();
    fact.pb(1);
    Inv.resize(n+1);
 
    for(int i=1;i<=n;i++){
        fact.pb(fact[i-1]*i%M);
    }
 
    Inv[n]=inv(fact[n],M);
    for(int i=n-1;i>=0;i--){
        Inv[i]=(Inv[i+1]*(i+1))%M;
    }
 
}
template<typename T1,typename T2,typename T3>
vector<T1> suite(T2 a,T3 f,ll n){
    vector<T1> c=a;
    for(int i=1;i<=n;i++){
        c.pb(f(c));
    }
    return c;
}
vector<ll> base(ll a, ll b){
    vector<ll> c;
    while(a){
        c.pb(a%b);
        a/=b;
    }
    return c;
}
void Prime(ll n){
    prime.clear();
    bool P[n+1];
    for(int i=0;i<=n;i++)P[i]=true;
    for(int i=2;i*i<=n;i++){
        if(P[i])
            for(int j=2;i*j<=n;j++)
                P[i*j]=false;
    }
 
    for(int i=2;i<=n;i++)
        if(P[i])prime.pb(i);
 
}
template<typename T1,typename T2,typename T3>
vector<T1> Ar_up(T2 a, T3 f){
    vector<T1> c;
    for(auto i:a){
        c.pb(f(i));
    }
    return c;
}
template<typename T1,typename T2,typename T3>
T1 Ar_op(T2 a, T3 f,T1 h){
    T1 c=h;
    for(auto i:a){
        c=f(c,i);
    }
    return c;
}
template<typename T1>
function<T1(T1,T1)> Operations(ll ind){
    if(ind == 1)    return [](T1 a,T1 b){return a<b? b : a;} ;//max
    if(ind == 2)    return [](T1 a,T1 b){return a<b? a : b;} ;//min
    if(ind == 3)    return [](T1 a,T1 b){return a+b;}; //sum
    if(ind == 4)    return [](T1 a,T1 b){return a*b;}; //product
    if(ind == 5)    return [](T1 a,T1 b){return a^b;}; //Xor
    if(ind == 6)    return [](T1 a,T1 b){return a|b;}; //Or
    if(ind == 7)    return [](T1 a,T1 b){return a&b;}; //And
 
}
template<typename T1,typename T2>
ll count(T1 a, T2 b){
    ll ans=0;
    for(auto i:a){
        ans+=int(i==b);
    }
    return ans;
}
template <typename T1> void Print(T1 a){
 
    for(auto i:a)   cout<<i<<" ";
 
    cout<<endl;
}
template <typename T1> void Print_Pairs(T1 a){
 
    for(auto i:a)   cout<<i.F<<" "<<i.S<<endl;;
 
    cout<<endl;
}
template<typename T1> void Read(vector<T1> &a,ll n=-1,bool Clear=false){
    if(n==-1)n=a.size();
    if(Clear) a.clear();
    if(Clear) a.resize(n);
    for(int i=0;i<n;i++){
        T1 x;
        cin>>x;
        a[i]=(x);
    }
}
template<typename T1> void ReadPair(vector<T1> &a,ll n,bool Clear=false){
    if(n==-1)n=a.size();
    if(Clear) a.clear();
    if(Clear) a.resize(n);
    for(int i=0;i<n;i++){
        T1 x;
        cin>>x.F>>x.S;
        a[i]=x;
    }
}
void N(){
    cout<<"No"<<endl;
}
void Y(){
    cout<<"Yes"<<endl;
}
void Answer(bool h){
    if(h)   Y();
    else N();
}
template<typename T1> ll BS(vector<T1> &a,T1 val,ll l=0,ll r=-1){
    if(r==-1)r+=a.size();
    ll m=(l+r)/2;
    while(l<=r){
        if(a[m]==val)break;
        if(a[m]>val)r=m-1;
        else l=m+1;
        m=(l+r)/2;
    }
    return m;
}
 
struct DSU{
    vector<ll> par,w;
    DSU(int n){
        par.resize(n);
        w.resize(n);
        for(int i=0;i<n;i++){
            w[i]=1;
            par[i]=i;
        }
    }
    ll Find_Parent(ll ind){
        if(par[ind]==ind)return ind;
        return par[ind]=Find_Parent(par[ind]);
    }
    void Join(ll x,ll y){
        ll u=Find_Parent(x),v=Find_Parent(y);
        if(u==v)return;
        if(w[u]<w[v])swap(u,v);
        w[u]+=w[v];
        par[v]=u;
    }
};
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
set<ll> s0,s1,s2;
vector<pair<int,int>> ans;
set<ll>::iterator t;
bool swap(int v){
    if(!s1.size())return false;
    if(v==2){
        if(!s2.size())return false;
        int st=*(s2.begin());
        t=s1.end();
        t--;
        int en=*t;
        if(en<st)return false;
        s2.erase(s2.begin());
        s1.erase(t);
        s2.insert(en);
        s1.insert(st);
        ans.pb(mk(st,en));
    }
    else{
        if(!s0.size())return false;
        int st=*(s1.begin());
        t=s0.end();
        t--;
        int en=*t;
        if(en<st)return false;
        s1.erase(s1.begin());
        s0.erase(t);
        s1.insert(en);
        s0.insert(st);
        ans.pb(mk(st,en));
    }
    return true;
}
void clean0(){
    ll mi=1e18;
    
    if(s1.size())
    mi=min(mi,*(s1.begin()));
    if(s2.size())
    mi=min(mi,*(s2.begin()));
    while(s0.size()&& (*(s0).begin())<mi)s0.erase(s0.begin());
    if(!s0.size()){
        mi=1e18;
        if(s2.size())
        mi=min(mi,*(s2.begin()));
        while(s1.size()&& (*(s1.begin()))<mi)s1.erase(s1.begin());
        if(!s1.size()){
            s2.clear();
        }
    }
}
void clean2(){
    ll mi=-1;
    
    if(s1.size()){
    
    t=s1.end();
    t--;
    mi=max(mi,*(t));
    }
    if(s0.size()){
    
    t=s0.end();
    t--;
    mi=max(mi,*(t));
    }
    t=s2.end();
    t--;
    while(s2.size()&& (*(s2.begin()))>mi)s2.erase(t--);
    if(!s2.size()){
        mi=-1;
        if(s0.size()){
    
    t=s0.end();
    t--;
    mi=max(mi,*(t));
    }
    t=s1.end();
    t--;
    while(s1.size()&& (*(s1.begin()))>mi)s1.erase(t--);
    if(!s1.size())
    s0.clear();
    }
}
void solve(){
    ll n;
    cin>>n;
    s0.clear();
    s1.clear();
    s2.clear();
    ans.clear();
    
    for(int i=0;i<n;i++){
        ll x;
        cin>>x;
        if(x==0)s0.insert(i+1);
        if(x==1)s1.insert(i+1);
        if(x==2)s2.insert(i+1);
    }
    for(int i=0;i<n;i++){
        while(swap(0));
        while(swap(2));
    }
    cout<<ans.size()<<endl;
    Print_Pairs(ans);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t=1;
    cin>>t;
    for(int i=0;i<t;i++){
        solve();
    }
}