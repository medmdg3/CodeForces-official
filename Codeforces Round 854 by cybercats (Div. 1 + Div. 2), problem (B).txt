#include <bits/stdc++.h>
#define ll  long long
#define ld long double
#define pb(a)   push_back(a)
#define mk(a,b) make_pair(a,b)  
#define f first
#define s second
using namespace std;

//Segment tree begin  Reserved names:max_N, node,e,segtree,lazy,segtrori,merge,fixe_lazy,build,update,querie.
const ll max_N=200001;
struct node{
    ll a;
};

node e;
vector<node> segtree(4*max_N);
vector<ll> lazy(4*max_N);
vector<node> Segtrori(max_N);

node merge(node a,node b){
node c;
    c.a= a.a+b.a;return c;
}

void fixe_lazy(ll l,ll r,ll p){
    segtree[p].a+=lazy[p]*(r-l+1);
    if(l==r){
        lazy[p]=0;
        return;
    }
    lazy[p*2]+=lazy[p];
    lazy[p*2+1]+=lazy[p];
    lazy[p]=0;
    return;
}

void build(ll l,ll r,ll p){
    lazy[p]=0;
    if(l==r){
        segtree[p]=Segtrori[l];
        
        return;
    }
    build(l,(l+r)/2,p*2);
    build((l+r)/2+1,r,p*2+1);
    segtree[p]=merge(segtree[p*2],segtree[p*2+1]);
}

void update(ll l,ll r,ll p,ll x,ll y,ll val){
    fixe_lazy(l,r,p);
    if(r<x||l>y)return;
    if(l>=x&&r<=y){
        lazy[p]+=val;
        fixe_lazy(l,r,p);
        return;
    }
    update(l,(l+r)/2,p*2,x,y,val);
    update((l+r)/2+1,r,p*2+1,x,y,val);
    segtree[p]=merge(segtree[p*2],segtree[p*2+1]);
}

node querie(ll l,ll r,ll p,ll x,ll y){
    fixe_lazy(l,r,p);
    if(r<x||l>y)return e;
    if(l>=x&&r<=y){
        return segtree[p];
    }
    return merge(querie(l,(l+r)/2,p*2,x,y),querie((l+r)/2+1,r,p*2+1,x,y));
}

//Segment tree end

//basic math begin Reserved names: M,prime,inv,mod_expo,gcd,find_prime,base,decompose_prime.
const ll M=1e9+7;
vector<ll> prime;
ll inv(ll a, ll b){
 return 1<a ? b - inv(b%a,a)*b/a : 1;
}
ll mod_expo(ll a,ll b){
    return (b?(mod_expo((a*a)%M,b/2)*(b&1? a:1))%M:1);
}
ll gcd(ll a,ll b){
    return (b?gcd(b,a%b):a);
}
void find_prime(ll n){
    prime.clear();
    bool Prime[n];
    for(int i=0;i<=n;i++)Prime[i]=true;
    for(int i=2;i<=sqrt(n);i++){
        for(int j=i;i*j<=n;j++){
            Prime[i*j]=false;;
        }
    }
    for(int i=2;i<=n;i++){
        if(Prime[i])	prime.pb(i);
    }
    return;
}
vector<ll> base(ll a, ll b){
    vector<ll> c;
    while(a){
        c.pb(a%b);
        a/=b;
    }
    return c;
}
vector<pair<ll,ll> > decompose_prime(ll a){
    vector<pair<ll,ll> > c;
    ll i=0;
    while(a>1){
        
        if(i<prime.size()){
            if(a%prime[i])  {
            i++;
            continue;
        }
        c.pb(mk(prime[i],0));
        while(a%prime[i]==0){
            c[c.size()-1].s++;
            a/=prime[i];
        }
        }else{
            c.pb(mk(a,1));
            break;
        }
    }
    return c;
}
ll Array_sum(vector<ll> a,ll x,ll y){
    ll c=0;
    for(int i=x;i<y;i++)c+=a[i];
    return c;
}
ll Array_max(vector<ll> a,ll x,ll y){
    ll c=a[x];
    for(int i=x;i<y;i++)c=max(c,a[i]);
    return c;
}
ll Array_min(vector<ll> a,ll x,ll y){
    ll c=a[x];
    for(int i=x;i<y;i++)c=min(c,a[i]);
    return c;
}
ll Array_prod(vector<ll> a,ll x,ll y){
    ll c=1;
    for(int i=x;i<y;i++)c*=a[i];
    return c;
}
ll Array_count(auto a,ll x,ll y,auto val){
    ll c=0;
    for(int i=x;i<y;i++)c+=int(a[i]==val);
    return c;
}
//basic math end

//basic Responds begin Reserved names:N,Y,Answer,Array.
void N(){
    cout<<"No"<<endl;
}
void Y(){
    cout<<"Yes"<<endl;
}
void Answer(bool h){
	if(h)	Y();
	else N();
}
void Array(vector<ll> a){
    for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
    cout<<endl;
}
//basic Responds end

//banned names: e,M,N,Y,max_N,gcd,node,base,inv,Answer,Array,merge,segtree,lazy,segtrori,fixe_lazy,build,update,querie,prime,mod_expo,find_prime,decompose_prime.
void solve(){
    ll n;
    cin>>n;
    vector<ll> a;
    for(int i=0;i<n;i++){
        ll x;
        cin>>x;
        a.pb(x);
    }
	if(Array_min(a,0,n)==1){
	    if(Array_count(a,0,n,1)==n){
	        cout<<0<<endl;
	        return;
	    }
	    cout<<-1<<endl;
	    return;
	}
	ll h=a[0],imd=0;
	for(int i=1;i<n;i++){
	    if(a[i]<h){
	        h=a[i];
	        imd=i;
	    }
	}
	vector<pair<ll,ll> > ans;
	while(Array_max(a,0,n)!=Array_min(a,0,n)){
	    for(int i=0;i<n;i++){
	        while(a[i]>a[imd]){
	            ans.pb(mk(i+1,imd+1));
	            a[i]=(a[i]+a[imd]-1)/a[imd];
	        }
	        imd=i;
	    }
	}
	cout<<ans.size()<<endl;
	for(int i=0;i<ans.size();i++){
	    cout<<ans[i].f<< " "<<ans[i].s<<endl;
	}
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t=1;
    cin>>t;
    for(int i=0;i<t;i++){
        solve();
    }
}